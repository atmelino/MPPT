var ws; var showMessagesFlag = false; var clientDateUTC; var clientDate; var sendmessage = { type: 'none', data: 'empty' }; function printMessage(target, message) { elementId = document.getElementById(target); if (elementId != null) { elementId.innerHTML += message; elementId.scrollTop = elementId.scrollHeight; } } function printlnMessage(target, message) { elementId = document.getElementById(target); if (elementId != null) { printMessage(target, message); } } function show(name) { var x = document.getElementById(name); x.style.display = 'block'; } function hide(name) { var x = document.getElementById(name); x.style.display = 'none'; } function showMessages() { if (document.getElementById('showMessages').checked) { showMessagesFlag = true; show('messagesDiv'); } else { showMessagesFlag = false; hide('messagesDiv'); } } function PWMminusButton() { sendmessage.type = 'PWMminus'; ws.send(JSON.stringify(sendmessage)); } function PWMplusButton() { sendmessage.type = 'PWMplus'; ws.send(JSON.stringify(sendmessage)); } function setRTCButton() { sendmessage.type = 'setRTC'; var year = clientDateUTC.getFullYear(); var month = clientDateUTC.getMonth() + 1; var day = clientDateUTC.getDate(); var hours = clientDateUTC.getHours(); var minutes = clientDateUTC.getMinutes(); var seconds = clientDateUTC.getSeconds(); var dayofweek = clientDateUTC.getDay(); setDate = { year: year, month: month, day: day, hours: hours, minutes: minutes, seconds: seconds, dayofweek: dayofweek } printlnMessage('messages', JSON.stringify(setDate)); sendmessage.data = setDate; ws.send(JSON.stringify(sendmessage)); } function getLogClicked() { sendmessage.type = 'getLog'; ws.send(JSON.stringify(sendmessage)); } function getDirClicked() { sendmessage.type = 'getDir'; sendmessage.data = ''; ws.send(JSON.stringify(sendmessage)); } function setloopPeriod() { var value = document.getElementById('loopPeriod').value; sendmessage.type = 'loopPeriod'; sendmessage.data = value; ws.send(JSON.stringify(sendmessage)); } function enableDataFiles() { sendmessage.type = 'enableDataFiles'; if (document.getElementById('enableDataFiles').checked) { sendmessage.data = true; } else { sendmessage.data = false; } ws.send(JSON.stringify(sendmessage)); } function setSaveFileLinesButton() { var value = document.getElementById('saveFileLines').value; sendmessage.type = 'saveFileLines'; sendmessage.data = value; ws.send(JSON.stringify(sendmessage)); } function LEDonOff() { sendmessage.type = 'LED'; if (document.getElementById('LEDonOff').checked) { sendmessage.data = 'on'; } else { sendmessage.data = 'off'; } ws.send(JSON.stringify(sendmessage)); } function settingsClicked() { var el = document.getElementById('settings'); el.style.display = 'block'; // Updates: set window background color black document.body.style.background = '#353333'; } function closePopup() { var el = document.getElementById('settings'); el.style.display = 'none'; document.body.style.background = 'white'; } function tableText(tableCell) { var pathDiv = document.getElementById('pathDiv'); var oldPath = pathDiv.innerHTML; var newItem = tableCell.innerHTML; var newPath = oldPath + '/' + newItem; if (newPath.includes('txt')) {sendmessage.type = 'getFile'; sendmessage.data = newPath; ws.send(JSON.stringify(sendmessage)); } else {pathDiv.innerHTML = newPath; sendmessage.type = 'getDir'; sendmessage.data = newPath; ws.send(JSON.stringify(sendmessage)); } //alert(tableCell.innerHTML); //alert(pathDiv.innerHTML); } window.onload = () => {ws = new WebSocket('ws://' + location.host, 'protocolOne'); ws.onmessage = evt => {receivedmessage = JSON.parse(evt.data); if (showMessagesFlag) { //printlnMessage('messages', JSON.stringify(receivedmessage)); } if (receivedmessage.type == 'getLog') { printlnMessage('messages', JSON.stringify(receivedmessage)); var logDiv = document.getElementById('logDiv'); var logContent = receivedmessage.data.replace(/\n/g, '<br>'); logDiv.innerHTML = logContent; } if (receivedmessage.type == 'getDir') { printlnMessage('messages', JSON.stringify(receivedmessage)); var dirTable = document.getElementById('dirTable'); while (dirTable.rows.length > 1) { dirTable.deleteRow(1); } for (s of receivedmessage.data) { var row = dirTable.insertRow(x); row.insertCell(0).innerHTML = s; } for (var i = 0; i < dirTable.rows.length; i++) { for (var j = 0; j < dirTable.rows[i].cells.length; j++) dirTable.rows[i].cells[j].onclick = function () { tableText(this); }; } } if (receivedmessage.type == 'getFile') { printlnMessage('messages', JSON.stringify(receivedmessage)); var storedTable = document.getElementById('storedTable'); while (document.getElementById('storedTable').rows.length > 1) { document.getElementById('storedTable').deleteRow(1); } var lines = receivedmessage.data.split('\n'); for (s of lines) { var row = storedTable.insertRow(x); var line = s.split(' '); var arrayLength = line.length; for (var i = 0; i < arrayLength; i++) { row.insertCell(i).innerHTML = line[i]; } } } if (receivedmessage.type == 'writeDataFile') { printlnMessage('messages', JSON.stringify(receivedmessage)); } if (receivedmessage.type == 'values') { var liveTable = document.getElementById('liveTable'); // new measurement data receiveddata = receivedmessage.data; var x = document.getElementById('liveTable').rows.length; if (x > 10) { document.getElementById('liveTable').deleteRow(1); x -= 1; } { var row = liveTable.insertRow(x); row.insertCell(0).innerHTML = receiveddata.dateString; row.insertCell(1).innerHTML = receiveddata.number; row.insertCell(2).innerHTML = receiveddata.busVoltage3; row.insertCell(3).innerHTML = receiveddata.current_mA3; row.insertCell(4).innerHTML = receiveddata.power_mW3; row.insertCell(5).innerHTML = receiveddata.busVoltage1; row.insertCell(6).innerHTML = receiveddata.current_mA1; row.insertCell(7).innerHTML = receiveddata.power_mW1; row.insertCell(8).innerHTML = receiveddata.PWM_actual; row.insertCell(9).innerHTML = receiveddata.PWM_target; } } // show date on header clientDateUTC = new Date(Date.now()); clientDate = new Date(clientDateUTC.getTime() - clientDateUTC.getTimezoneOffset() * 60000); //var clientDateString = clientDate.toISOString().replace(/:/g, '_').slice(0, 19); //var clientDateString = clientDate.toISOString().slice(0, 19); var clientDateString = clientDate.toISOString().replace(/T/g, ' ').slice(0, 19); document.getElementById('clientDate').innerHTML = clientDateString; //if (showMessagesFlag) { //printlnMessage('messages', JSON.stringify(clientDate)); //} }; }; 
